{"version":3,"file":"static/js/546.9856562d.chunk.js","mappings":"6HAkBA,IAhBA,WAA6C,IAAlBA,EAAQ,uDAAG,IAClC,GAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KAY1B,OAVAC,EAAAA,EAAAA,YAAU,WACN,GAAIF,EAAS,CACT,IAAIG,EAAUC,YAAW,kBAAMH,EAAW,GAAG,GAAEH,GAC/C,OAAO,WACHO,aAAaF,EACjB,CACJ,CAEJ,GAAG,CAACH,IAEG,CAACA,EAASC,EACrB,C,sLCRMK,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,MAAOF,EAAAA,KAAaG,SAAS,6BAoGjC,EAjG2B,SAACC,GACxB,MAAqEA,EAA7DC,cAAAA,OAAa,OAAQ,EAAEC,EAAsCF,EAAtCE,UAAU,EAA4BF,EAA3BG,UAAAA,OAAS,MAAG,WAAU,EAEhE,GAAkCf,EAAAA,EAAAA,WAAS,GAAM,eAA1CgB,EAAS,KAAEC,EAAY,KAE9B,GAA8BC,EAAAA,EAAAA,KAAmB,eAA1CjB,EAAO,KAAEC,EAAU,KAEpBiB,EAAU,yCAAG,WAAOC,EAAQC,GAAa,8EACxB,OAAnBA,GAAc,GAAK,mBAEIC,EAAAA,EAAAA,IAAkBF,GAAO,OAAlC,OACDG,OACLF,GAAc,GACdJ,GAAa,IAChB,gDAEDf,GAAW,4BAAgB,QAAhB,OAAQsB,gBAAQ,OAAM,QAAN,EAAhB,EAAkBD,YAAI,WAAtB,IAAwBtB,UAAW,KAAOwB,YACrDJ,GAAc,GAAM,yDAE3B,gBAZe,wCAchB,OACI,iBAAKP,UAAWA,EAAU,WACtB,gBAAKA,UAAU,OAAM,SAChBE,GACG,iCACI,eAAIF,UAAU,OAAM,+BACpB,0FAMJ,iCACI,eAAIA,UAAU,OAAM,8BACpB,+FAOXb,IACG,SAAC,KAAK,CAACa,UAAU,OAAOY,KAAK,SAASC,UAAQ,WACzC1B,KAGT,SAAC,KAAM,CACH2B,cAAe,CACXlB,MAAO,kBAEXH,iBAAkBA,EAClBsB,SAAU,SAACT,EAAO,GAAwB,IAArBC,EAAa,EAAbA,cACZR,EAGDQ,GAAc,GAFdF,EAAWC,EAAQC,EAI3B,EAAE,SAED,gBAAGS,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAAY,OAC7B,SAAC,KAAI,WACD,UAAC,KAAa,YACV,gBAAKlB,UAAWE,EAAY,SAAW,GAAG,UACtC,SAAC,KAAQ,CACLiB,QAASF,EAAOrB,OAASoB,EAAQpB,MACjCwB,aAAcH,EAAOrB,MAAM,UAE3B,SAAC,KAAK,CACFgB,KAAK,QACLS,aAAa,MACbC,KAAK,QACLC,YAAY,QACZC,UAAWC,EAAAA,UAIvB,SAAC,KAAM,CACHC,OAAK,EACLC,QAAST,EACTU,QAAQ,QACRhB,KAAK,SAAQ,SAEZV,EAAY,eAAiB,gBAElC,iBAAKF,UAAU,mBAAkB,WAC7B,wCACA,SAAC,KAAU,CAAC6B,GAAI5B,EAAU,4BAG/B,MAK3B,ECpGA,EAJuB,WACnB,OAAO,SAAC,EAAkB,CAACF,eAAe,GAC9C,C","sources":["utils/hooks/useTimeOutMessage.js","views/auth/ForgotPassword/ForgotPasswordForm.js","views/auth/ForgotPassword/index.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction useTimeOutMessage(interval = 3000) {\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            let timeout = setTimeout(() => setMessage(''), interval)\r\n            return () => {\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [message])\r\n\r\n    return [message, setMessage]\r\n}\r\n\r\nexport default useTimeOutMessage\r\n","import React, { useState } from 'react'\r\nimport { Input, Button, FormItem, FormContainer, Alert } from 'components/ui'\r\nimport { ActionLink } from 'components/shared'\r\nimport { apiForgotPassword } from 'services/AuthService'\r\nimport useTimeOutMessage from 'utils/hooks/useTimeOutMessage'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string().required('Please enter your email'),\r\n})\r\n\r\nconst ForgotPasswordForm = (props) => {\r\n    const { disableSubmit = false, className, signInUrl = '/sign-in' } = props\r\n\r\n    const [emailSent, setEmailSent] = useState(false)\r\n\r\n    const [message, setMessage] = useTimeOutMessage()\r\n\r\n    const onSendMail = async (values, setSubmitting) => {\r\n        setSubmitting(true)\r\n        try {\r\n            const resp = await apiForgotPassword(values)\r\n            if (resp.data) {\r\n                setSubmitting(false)\r\n                setEmailSent(true)\r\n            }\r\n        } catch (errors) {\r\n            setMessage(errors?.response?.data?.message || errors.toString())\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"mb-6\">\r\n                {emailSent ? (\r\n                    <>\r\n                        <h3 className=\"mb-1\">Check your email</h3>\r\n                        <p>\r\n                            We have sent a password recovery instruction to your\r\n                            email\r\n                        </p>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <h3 className=\"mb-1\">Forgot Password</h3>\r\n                        <p>\r\n                            Please enter your email address to receive a\r\n                            verification code\r\n                        </p>\r\n                    </>\r\n                )}\r\n            </div>\r\n            {message && (\r\n                <Alert className=\"mb-4\" type=\"danger\" showIcon>\r\n                    {message}\r\n                </Alert>\r\n            )}\r\n            <Formik\r\n                initialValues={{\r\n                    email: 'admin@mail.com',\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    if (!disableSubmit) {\r\n                        onSendMail(values, setSubmitting)\r\n                    } else {\r\n                        setSubmitting(false)\r\n                    }\r\n                }}\r\n            >\r\n                {({ touched, errors, isSubmitting }) => (\r\n                    <Form>\r\n                        <FormContainer>\r\n                            <div className={emailSent ? 'hidden' : ''}>\r\n                                <FormItem\r\n                                    invalid={errors.email && touched.email}\r\n                                    errorMessage={errors.email}\r\n                                >\r\n                                    <Field\r\n                                        type=\"email\"\r\n                                        autoComplete=\"off\"\r\n                                        name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        component={Input}\r\n                                    />\r\n                                </FormItem>\r\n                            </div>\r\n                            <Button\r\n                                block\r\n                                loading={isSubmitting}\r\n                                variant=\"solid\"\r\n                                type=\"submit\"\r\n                            >\r\n                                {emailSent ? 'Resend Email' : 'Send Email'}\r\n                            </Button>\r\n                            <div className=\"mt-4 text-center\">\r\n                                <span>Back to </span>\r\n                                <ActionLink to={signInUrl}>Sign in</ActionLink>\r\n                            </div>\r\n                        </FormContainer>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordForm\r\n","import React from 'react'\r\nimport ForgotPasswordForm from './ForgotPasswordForm'\r\n\r\nconst ForgotPassword = () => {\r\n    return <ForgotPasswordForm disableSubmit={false} />\r\n}\r\n\r\nexport default ForgotPassword\r\n"],"names":["interval","useState","message","setMessage","useEffect","timeout","setTimeout","clearTimeout","validationSchema","Yup","shape","email","required","props","disableSubmit","className","signInUrl","emailSent","setEmailSent","useTimeOutMessage","onSendMail","values","setSubmitting","apiForgotPassword","data","response","toString","type","showIcon","initialValues","onSubmit","touched","errors","isSubmitting","invalid","errorMessage","autoComplete","name","placeholder","component","Input","block","loading","variant","to"],"sourceRoot":""}